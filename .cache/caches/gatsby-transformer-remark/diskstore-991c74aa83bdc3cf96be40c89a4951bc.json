{"expireTime":9007200823662582000,"key":"transformer-remark-markdown-html-1917a54b2765e281f94a0ae5ffb26e01--","val":"<p>Like I mentioned in my previous blog,</p>\n<blockquote>\n<p>An API (Application Programming Interface) is a way for one system to interact with another via a well-defined interface.</p>\n</blockquote>\n<p>RubyOnRails is known for rapid development of web apps. Following the current trends, integrating a frontend framework has become challenging and even time consuming .</p>\n<p>In fact, modern web app architecture nowadays consist of a client app that consumes a JSON API. Indeed, Rails 5 introduced the api mode ; A bootstrapped skeleton for api only apps.</p>\n<p>We're going to quickly go through how to set up a Rails API app that does a lot of work for you so you won't need to spend as much time trying to configure all of the details.</p>\n<p><strong>Step 1: Create Rails API Skeleton</strong></p>\n<p>In your terminal type:</p>\n<pre><code>rails new [api_name]  — api\n</code></pre>\n<p>If you want to set a specific database type or test suite, you can use the -d and -T flags. Otherwise your default with be a sqlite3 database and Minitest testing suite.</p>\n<pre><code>rails new library --api -d mysql -T\n</code></pre>\n<p>Step 2: Installing Rspec</p>\n<p>If you decided you want to use RSpec instead of Minitest, you will need to install RSpec by adding it to your Gemfile on the development/test group:</p>\n<pre><code>group :development, :test do\n  gem 'rspec-rails', '~> 3.6'\nend\n</code></pre>\n<p>Once this has been added, run <code>bundle install</code>. When the bundle has finished, run <code>rails generate rspec:install</code> to create all of the Rspec folders and files.</p>\n<p>Step 3: Versioning</p>\n<p>We want to access our api via /api/v1 url, so first let's create the missing folders:</p>\n<pre><code>mkdir app/controllers/api\nmkdir app/controllers/api/v1\n</code></pre>\n<p>Step 4: Creating Models</p>\n<p>Now that we have our initial API app set up, most things from here work like a normal Rails app.</p>\n<p>Create a model using a generator:</p>\n<pre><code>rails g scaffold Article title:string content:text slug:string\nrails db:migrate\n</code></pre>\n<p>Rails has now created the model, the migration and the spec for us. We have also gone ahead and migrated to create our articles table.</p>\n<p>Step 5: Move resource controller to its respective folder</p>\n<pre><code>mv app/controllers/articles_controller.rb app/controllers/api/v1\n</code></pre>\n<p>Now we need to add the namespaces prior to the class name and update the url helper in the create methods which should en dup looking like this:</p>\n<pre><code>class Api::V1::ArticlesController &#x3C; ApplicationController\n\n  before_action :set_article, only: [:show, :update, :destroy]\n\n  # GET /articles\n  def index\n   @articles = Article.all\n   render json: @articles\n  end\n\n  # GET /articles/1\n  def show\n   render json: @article\n  end\n\n  # POST /articles\n  def create\n   @article = Article.new(article_params)\n   if @article.save\n    render json: @article, status: :created, location:        api_v1_article_url(@article)\n   else\n    render json: @article.errors, status: :unprocessable_entity\n   end\n  end\n\n  # PATCH/PUT /articles/1\n  def update\n   if @article.update(article_params)\n    render json: @article\n   else\n    render json: @article.errors, status: :unprocessable_entity\n   end\n  end\n\n # DELETE /articles/1\n  def destroy\n   @article.destroy\n  end\n\n  private\n\n  # Use callbacks to share common setup or constraints between actions.\n  def set_article\n   @article = Article.find(params[:id])\n  end\n\n  # Only allow a trusted parameter “white list” through.\n  def article_params\n  params.require(:article).permit(:title, :content, :slug)\n  end\n  end\n</code></pre>\n<p>Step 6: Update route file</p>\n<p>Open up the routes.rb file and delete the resource line:</p>\n<pre><code>resources :articles\n</code></pre>\n<p>Then add the namespaces, your final route should look like this:</p>\n<pre><code>Rails.application.routes.draw do\n namespace :api do\n  namespace :v1 do\n   resources :articles\n  end\n end\n\nend\n</code></pre>\n<p>Step 7: Rinse and Repeat</p>\n<p>You can repeat steps 4-6 to create as many resources that you want!</p>"}